1. /register_user

    *info:

    will statr the signining in process no token needed it takes a json request in the form of :

    {
        "fname" : "jack",
        "lname" : "smith",
        "username" : "jack324",
        "email" : "example@example.com",
        "password" : "12345678",
        
    }

    it has the clasic fname and lname , the username is a unique value identifier setted by the user ,email is 
    unique value , pass is min length 8 char

    *responses:

        **email alredy exists error : 
            "message" => "user email alredy exists"
            (code:409)

        **user email exists but needs verification:
            "message"=>"email already exists abut not verified , verification coe sent"
            (code:403)
        
        **username alredy exists error:
            "message" => "user name alredy exists"
            (code:409)
        
        **email sent to the user and he got registerd:
            "message"=>"user registerd",
            "token"=>USER_TOKEN
            (code:200)


    



2. /verify

    *info:
        this api will request the 4 digit verification code sent to the user when using ( api 1 ) . it is the second step
        in signing in the user it will check the saved and the inputed code if it failed the user data that has 
        been saved temporarly in the session will be deleted including the old code so the user will need to 
        sign in from the bigining , if the checking was successful the user data will be saved and 2 privalte DB tables
        will be created fr his future data . api does not need a token but it will need a json array in the form:

        {
        "code":" 1815",
        "timezone": 17
        }
    *resources:
        **useris alredy verified how did he get here :
            "message"=>"user alredy is verified"
            (code:405)

        **all good to do he is verified:
            "message"=>"user good to go"
            (code:201)

       

        **user inputed a wrong code thus verification failed:
            "message"=>"verification code does not match"
            (code:400)
        
       



5./login_user

    *info:

        this api will login the user maualy by him entering his email and password .the request does not need a token 
        but it need a json array in the form:

        {
    
            "email" : "example@example.com",
            "password" : "12345678",
            "timezone":4
    
        }

    *responses:

        **user is loged in and got a new token :
            "massage"=>"user loged in"
            "token" => USER_NEW_TOKEN
            (code:200)
        
        **email or password do not match:
            "message"=>"email or password do not match"
            (code:401)

6. /home 

    *info:

        this api will ge the user available appointments dates  (token needed)

            {
                "timezone":3
            }

    *responses:

        **if data found:
            {
                "message" => "appointments found for user",
                "status" => true,
                "data" => {
                    "2023-11-05",
                    "2024-02-14",
                    "2024-06-21",
                    "2024-09-10"
                }
            }
            code(200)

        **if no data found:
            "message" => "no appointments found for user",
            "status" => false,
            "data" => ""
            code(200)
        
        **token expired and user need to login manualy:
            "message"=>"token expired"
            (code:401)
        **server error go login manualy:
            "massage"=>"internal server error (token last_used_at is null)"
            (code:500)
        ** user not verified:
            "message"=>"user need to be verified to enter"
            (code:401)

7 . HAS BEEN REMOVED

8./home/showDetails
    *info:
        this request will get the details of that reqwested date to show all appointments in it:

        {
        "r_date":"2024-09-10"
        }
    *response:
        **the app data :
            "time_data" => time_data
            (code:200)
        **what the fuck happened?? :
            "message"=>"Bad Request"
            (code:400)
        **our user is travling in time :
            "message"=>"the requested date is in the past , are you a time travler ?"
            (code:418)

9./settings/getSettings
    *info:
        get the user settings by sending an empty request
    *response:
        **user data found:
            "message": "user settings were found",
            "data": {
                "id": 2,
                "owner_id": "2",
                "work_from": "09:00:00",
                "work_to": "17:00:00",
                "break_time": "00:15:00",
                "time_zone": 3,
                "logic": "appointment",
                "max_app": 10,
                "monday": "accepted",
                "tuesday": "accepted",
                "wednesday": "accepted",
                "thursday": "accepted",
                "friday": "accepted",
                "saturday": "rejected",
                "sunday": "rejected",
                "max_duration_swicth": 0,
                "max_duration_time": "00:00:00",
                "min_time_switch": 0,
                "min_time": "00:00:00",
                "app_fixed_duration_switch": 0,
                "app_fixed_duration": "00:00:00",
                "allow_dm": 0,
                "created_at": "2024-09-09T18:44:22.000000Z",
                "updated_at": "2024-09-09T19:47:42.000000Z"
            }
        **how is this happening :
            "message"=>"no content found"
            (code:204)
        **user not found or we got a brken token manual login needed:
            "message"=>"user was not found or a broken token"
            (code:401)

10. /settings/saveSettings

    *info :
        this will save the setting of the user when he hit save the request need to have a token and take this form :

        {
                    "work_from":"09:00:00",
                    "work_to":"17:00:00",
                    "break_time":"00:15:00",
                    "time_zone":3,
                    "logic":"appointment",
                    "max_app":10,
                    "monday":"accepted",
                    "tuesday":"accepted",
                    "wednesday":"accepted",
                    "thursday":"accepted",
                    "friday":"accepted",
                    "saturday":"rejected",
                    "sunday":"rejected",
                    "max_duration_swicth":false,
                    "max_duration_time":"00:00:00",
                    "min_time_switch":false,
                    "min_time":"00:00:00",
                    "app_fixed_duration_switch":false,
                    "app_fixed_duration":"00:00:00",
                    "allow_dm":false
                }

    *responses:

        **if successful:
            "message"=>"setting are saved"
            code(200)
        **server error unclear problem:
            "message"=>"internal server error (problem is unclear)"
            cde(500)
        **user was not found or broken token:
            "message"=>"user was not found or a broken token"
            code(401)

11./people/getPeople

    *info:
        this api will give back all the users that the users had followed only the token is needed
    *responses:
        **incase of error it will return code(500) and deferent type of messages beacuse no clear problem might happened
        **if it worked it might be with data if the status is true and false if the user did not follow any one yet :

            {
                "message": "users fownd",
                "status": true,
                "data": [
                            {
                                "fname": "daniel2",
                                "lname": "trab",
                                "id": 16
                            }
                        ]
            }
            code(200)
12./people/followUser
    *info:
        the api will follow that person the user token is needed and the other person id is needed:

            {
                "other_user" : "16"
            }
    *responses:
        **any error will happen will give code(500) becase we do not know what are the posible problem that might happen witch souldent
        **if worked you will get code(200) this meen you can continue and the follow was successful
13./people/unfollowPeople
    *info :
        the api will unflolow the user . the token and other person id needed 
            {
                "other_user" : "16"
            }
    *responses:
        **if any error it will get code(500)
        **if successful code(200)
14./people/searchPeople  
    *info:
        it will search for the user if his account is public will return it it need the user token and the name to search
            {
                "search" : "daniel"
            }
    *responses:
        **errors will get code(500)
        **Success will get code(200) and

            [
                [
                    {
                        "fname": "daniel2",
                        "lname": "trab",
                        "f_status": "following"
                    }
                ]
            ]

            if f_status is "following" this mean we alredy followed this person
            if it is "null" this meen we did not follow him


15./requests/setrequest
    *Info:

        This endpoint is used to set a new request. It takes a JSON request in the following format:

            {
            "other_user": 2
            }
    *Responses:
        **Success:
            {
                "userId": 2,
                "info": {
                    "work_from": "09:00",
                    "work_to": "18:00",
                    "time_zone": "UTC+2"
                },
                "full_days": ["2024-09-10", "2024-09-11"],
                "info_day": {
                    "monday": 1,
                    "tuesday": 1,
                    "wednesday": 1,
                    "thursday": 1,
                    "friday": 1,
                    "saturday": 0,
                    "sunday": 0
                }
            }
                (code: 200)         

        **Error (general server error during request):
            {
            "message": "everbebert"
            }
            (code: 500)

16./requests/checkDate
    Info:

        This endpoint checks the availability of a given appointment date. It expects a JSON request in the following format:
        {
        "appointment_date": "2024-09-10",
        "user_id": 1
        }

    Responses:

        Success (Date available):

            {
            "userId": 1,
            "r_date": "2024-09-10",
            "time_data": {
                "from": "09:00",
                "to": "17:00"
            },
            "work_data": {
                "work_from": "09:00",
                "work_to": "17:00"
            }
            }
            (code: 200)

        Date full/closed:
            {
                "message": "The requested date (2024-09-10) for that person is full/closed. Please select a date that might not be full/closed."
            }
            (code: 409)

        Date in the past:
            {
                "message": "The requested date (2024-09-10) is in the past. Please select a suitable date."
            }
            (code: 400)

17./requests/checkDate

    Info:
    
        This endpoint sends a finalized appointment request. It expects a JSON request in the following format:
        {
        "userId":1,
        "r_date":"2024-09-10",
        "starting_t":"18:50:00",
        "ending_t":"19:30:00",
        "r_title":"test",
        "r_desc":"testing"
    
        }

    Responses:

        Success (Request Sent Successfully):
        {
            "message": "Request sent successfully"
        }
        (code: 200)

        Time Conflict or Invalid Time Input:
        {
            "message": "time inputted wrong or appointment time conflicts with other appointments"
        }
        (code: 409)

        Time in the Past:

        {
            "message": "The requested time is in the past. Please select a suitable time."
        }
        (code: 400)



18. /forgotpass

    info :
        it will send an email to the user with an otp to change the password

    response:

        true : it worked
        fasle : it did not work  duuuhhh what do you thinck  :)

19. /forgotpass/submit
    info :
        it take will take the v code and the two passwords :

        {
            "code":8033,
            "pass_1":"12345678",
            "pass_2":"12345678"
        }

    results :
        it worked 
        [
            "message"=>"new pass is set",
               
        ]
            code(201)
        
        the 2 passwords does not match [NOTE: THE OTP IN THIS CASE WILL NOT BE DELETED SO THE USER CAN USE IT AGAIN]:
        "message"=>"passwords do not match"
        code(403)

        the otp does not match you need to request a new one :

        "message"=>"verification code does not match"

        code(401)

20. /profile/getinfo 

    info 
        this will get the user profileinfo 

        no body

    responses 
        it worked
        {
    "message": "user data found",
    "data": {
        "fname": "daniel",
        "lname": "traboulsi",
        "username": "da",
        "email": "o9danieltra@gmail.com"
    }

    code(200)

21./profile/changename

    info 
        it will change the person name :)

        {
            "fname":"daniel",
            "lname":"traboulsi"

        }

        response

        {"message":"user name saves"} code(200)

22./profile/changeemail

    info it will allow the user to change his email

    {
    "email":"o9danieltra@gmail.com"
}

response : 

{"message":"user email saved and need verification"} code(200)

new email alredy exists
"message"=>"email alresy in use" code(401)

something went wrong with the otp
"message"=>"internal server error (problem in sending otp email)" code(500) 

23./profile/verifynewemail

info 

the user will not be able to use he new email till he verify it the old one will still active till the new one got verified

{
    "code":" 7279"
}

responses

{"message":"user new email is set to sart using it"} code(201)

otp wrong and he need to input the new email again to send a new otp 

"message"=>"verification code does not match" code(400)



23./profile/changepass

info 

the api will allw the user to change his password 


{
    "old_password":"12345678",
    "new_pass_1":"1234567890",
    "new_pass_2":"1234567890"
}

Responses

all good to go :

"message"=>"new pass is set" code(201)

the 2 pas does not match :

"message"=>"the new pass does not match" code(403)

the old pass does not match 

"message"=>"old pass does not match" code(401)





